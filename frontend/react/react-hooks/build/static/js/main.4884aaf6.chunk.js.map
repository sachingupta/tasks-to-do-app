{"version":3,"sources":["serviceWorker.ts","components/Todo.tsx","components/TodoList.tsx","components/TodoForm.tsx","components/TodoFormContainer.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Todo","props","todo","react","className","style","textDecoration","status","title","onClick","onComplete","id","onRemove","TodoListRenderer","todos","todosRender","index","length","push","Todo_Todo","key","TodoForm","onSubmit","type","value","onChange","TodoFormContainer","_useState","useState","_useState2","Object","slicedToArray","setValue","e","preventDefault","addTodo","target","App","setTodos","TodoList_TodoListRenderer","newTodos","toConsumableArray","Number","splice","todoText","toString","concat","ReactDOM","render","react_default","a","createElement","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ECROC,QAAO,SAACC,GAAsB,IAC/BC,EAASD,EAATC,KACR,OACIC,EAAA,qBACEC,UAAU,OACVC,MAAO,CAAEC,eAA+B,YAAfJ,EAAKK,OAAuB,eAAiB,KAErEL,EAAKM,MAENL,EAAA,yBACEA,EAAA,wBAAQM,QAAS,WAAQR,EAAMS,WAAWR,EAAKS,MAA/C,YACAR,EAAA,wBAAQM,QAAS,WAAQR,EAAMW,SAASV,EAAKS,MAA7C,SCTCE,EAAmB,SAACZ,GAG7B,IAH+D,IACvDa,EAAUb,EAAVa,MACFC,EAAqB,GAClBC,EAAQ,EAAGA,EAAQF,EAAMG,OAAQD,IACtCD,EAAYG,KAAKf,EAAA,cAACgB,EAAD,CACbC,IAAKJ,EACLd,KAAMY,EAAME,GACZN,WAAYT,EAAMS,WAClBE,SAAUX,EAAMW,YAGxB,OACIT,EAAA,qBAAKC,UAAU,aACVW,UCfN,SAASM,EAASpB,GACrB,OACIE,EAAA,sBAAMmB,SAAUrB,EAAMqB,UACpBnB,EAAA,uBAAOC,UAAU,aACfmB,KAAK,OACLC,MAAOvB,EAAMuB,MACbC,SAAUxB,EAAMwB,YCPrB,SAASC,EAAkBzB,GAAgC,IAAA0B,EACpCC,mBAAS,IAD2BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACvDH,EADuDK,EAAA,GAChDG,EADgDH,EAAA,GAc9D,OACI1B,EAAA,cAACkB,EAAD,CAAUG,MAAOA,EAAOF,SARP,SAACW,GAClBA,EAAEC,iBACEV,IACAvB,EAAMkC,QAAQX,GACdQ,EAAS,MAImCP,SAZnC,SAACQ,GACdD,EAASC,EAAEG,OAAOZ,UCFnB,IAAMa,EAAM,SAACpC,GAA0B,IAAA0B,EAClBC,mBAAS3B,EAAMa,OADGe,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrCb,EADqCe,EAAA,GAC9BS,EAD8BT,EAAA,GAqB5C,OACE1B,EAAA,qBAAKC,UAAU,OACbD,EAAA,cAACoC,EAAD,CAAkBzB,MAAOA,EAAOJ,WAdf,SAACC,GACpB,IAAM6B,EAAQV,OAAAW,EAAA,EAAAX,CAAOhB,GACrB0B,EAASE,OAAO/B,IAAKJ,OAAS,WAC9B+B,EAASE,IAWmD5B,SAR3C,SAACD,GAClB,IAAM6B,EAAQV,OAAAW,EAAA,EAAAX,CAAOhB,GACrB0B,EAASG,OAAOD,OAAO/B,GAAK,GAC5B2B,EAASE,MAMPrC,EAAA,cAACuB,EAAD,CAAmBS,QArBP,SAACS,GACf,IAAM1C,EAAc,CAAES,GAAIG,EAAMG,OAAO4B,WAAYrC,MAAOoC,EAAUrC,OAAQ,UACtEiC,EAAQ,GAAAM,OAAAhB,OAAAW,EAAA,EAAAX,CAAOhB,GAAP,CAAcZ,IAC5BoC,EAASE,QCQbO,IAASC,OACLC,EAAAC,EAAAC,cARY,SAAClD,GAAyB,IAC9Ba,EAAUb,EAAVa,MACR,OACImC,EAAAC,EAAAC,cAACC,EAAD,CAAKtC,MAAOA,KAKhB,CAASA,MAlBU,CACnB,CAAEH,GAAI,IAAKH,MAAO,wBAAyBD,OAAQ,UACnD,CAAEI,GAAI,IAAKH,MAAO,wBAAyBD,OAAQ,UACnD,CAAEI,GAAI,IAAKH,MAAO,6BAA8BD,OAAQ,aAgBxD8C,SAASC,eAAe,SN8GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4884aaf6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { ITodo } from \"./IApp\";\r\nimport \"./Components.css\"; \r\n\r\ninterface ITodoProps {\r\n    todo: ITodo;\r\n    onComplete: (id: string) => void;\r\n    onRemove: (id: string) => void;\r\n}\r\n\r\nexport const Todo = (props: ITodoProps) => {\r\n    const { todo } = props;\r\n    return  (\r\n        <div\r\n          className=\"todo\"\r\n          style={{ textDecoration: todo.status == \"Complete\" ? \"line-through\" : \"\" }}\r\n          >\r\n          {todo.title}\r\n    \r\n          <div>\r\n            <button onClick={() => { props.onComplete(todo.id) }}>Complete</button>\r\n            <button onClick={() => { props.onRemove(todo.id) }}>x</button>\r\n          </div>\r\n        </div>\r\n      );\r\n}","import * as React from \"react\";\r\nimport { ITodo } from \"./IApp\";\r\n\r\nimport { Todo } from \"./Todo\";\r\nimport  \"./Components.css\"; \r\n\r\ninterface ITodoListRendererProps {\r\n    todos: ITodo[];\r\n    onComplete: (id: string) => void;\r\n    onRemove: (id: string) => void;\r\n}\r\n\r\nexport const TodoListRenderer = (props: ITodoListRendererProps) => {\r\n    const { todos } = props;\r\n    const todosRender: any[] = [];\r\n    for (let index = 0; index < todos.length; index++) {\r\n        todosRender.push(<Todo\r\n            key={index}\r\n            todo={todos[index]}\r\n            onComplete={props.onComplete}\r\n            onRemove={props.onRemove}\r\n        />);\r\n    }\r\n    return (\r\n        <div className=\"todo-list\">\r\n            {todosRender}\r\n        </div>\r\n    );\r\n}","import * as React from \"react\";\r\n\r\nimport  \"./Components.css\"; \r\n\r\ninterface ITodoFormProps {\r\n  value: string;\r\n  onChange: (e: any) => void;\r\n  onSubmit: (e: any) => void;\r\n}\r\n\r\nexport function TodoForm(props: ITodoFormProps){\r\n    return (\r\n        <form onSubmit={props.onSubmit}>\r\n          <input className=\"todo-input\"\r\n            type=\"text\"\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n          />\r\n        </form>\r\n      );\r\n}","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport { TodoForm } from \"../components/TodoForm\";\r\n\r\ninterface ITodoFormContainerProps {\r\n    addTodo: (text: string) => void;\r\n}\r\n\r\nexport function TodoFormContainer(props: ITodoFormContainerProps) {\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    const onChange = (e: any) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e: Event) => {\r\n        e.preventDefault();\r\n        if (value) {\r\n            props.addTodo(value);\r\n            setValue(\"\");\r\n        }\r\n    }\r\n    return (\r\n        <TodoForm value={value} onSubmit={handleSubmit} onChange={onChange} />\r\n    );\r\n}","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ITodo } from \"./components/IApp\";\r\nimport { TodoListRenderer } from \"./components/TodoList\";\r\nimport \"./App.css\";\r\nimport { TodoFormContainer } from \"./components/TodoFormContainer\";\r\n\r\ninterface IHooksAppProps {\r\n  todos: ITodo[];\r\n}\r\n\r\nexport const App = (props: IHooksAppProps) => {\r\n  const [todos, setTodos] = useState(props.todos);\r\n\r\n  const addTodo = (todoText: string) => {\r\n    const todo: ITodo = { id: todos.length.toString(), title: todoText, status: \"Active\" };\r\n    const newTodos = [...todos, todo];\r\n    setTodos(newTodos);\r\n  }\r\n\r\n  const completeTodo = (id: string) => {\r\n    const newTodos = [...todos];\r\n    newTodos[Number(id)].status = \"Complete\";\r\n    setTodos(newTodos);\r\n  }\r\n\r\n  const removeTodo = (id: string) => {\r\n    const newTodos = [...todos];\r\n    newTodos.splice(Number(id), 1);\r\n    setTodos(newTodos);\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <TodoListRenderer todos={todos} onComplete={completeTodo} onRemove={removeTodo} />\r\n      <TodoFormContainer addTodo={addTodo} />\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ITodo } from \"./components/IApp\";\r\nimport { App } from \"./App\";\r\n\r\n\r\nconst todos: ITodo[] = [\r\n    { id: \"0\", title: \"Learn1204 about React\", status: \"Active\" },\r\n    { id: \"1\", title: \"Meet friend for lunch\", status: \"Active\"},\r\n    { id: \"2\", title: \"Build really cool todo app\", status: \"Active\" }\r\n]\r\n\r\ninterface ITodoAppProps {\r\n    todos: ITodo[];\r\n}\r\n\r\nconst TodoApp = (props: ITodoAppProps) => {\r\n    const { todos } = props;\r\n    return (\r\n        <App todos={todos} />\r\n    );\r\n}\r\n\r\nReactDOM.render(\r\n    <TodoApp todos={todos} />,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}